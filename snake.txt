            // === グローバル変数の宣言 ===
            let snake; // スネーク（ヘビ）オブジェクトを格納する変数
            let food;  // フード（餌）オブジェクトを格納する変数
            let gridSize = 20; // グリッドの各セルのサイズ（ピクセル単位）
            let cols, rows; // キャンバスの列数と行数を格納する変数
            let started = false; // ゲームが開始されているかどうかのフラグ
            let startButton; // スタートボタンのDOM要素
            let continueButton; // コンティニュー（再開）ボタンのDOM要素


            /**
             * P5.jsの初期設定を行う関数。
             * プログラム開始時に一度だけ実行される。
             */
            function setup() {
                // キャンバスのサイズを幅400px、高さ400pxに設定
                createCanvas(400, 400); 
                // フレームレートを1秒あたり10フレームに設定（ヘビの移動速度に影響）
                frameRate(10); 
                // キャンバスの幅をグリッドサイズで割り、列数を計算
                cols = floor(width / gridSize);
                // キャンバスの高さをグリッドサイズで割り、行数を計算
                rows = floor(height / gridSize);


                // === スタートボタンの作成と設定 ===
                startButton = createButton('▶ START'); // ボタンのテキストを設定
                // ボタンの位置をキャンバスの中央付近に設定
                startButton.position(width / 2 - 40, height / 2 - 20); 
                // ボタンがクリックされたときにstartGame関数を呼び出す
                startButton.mousePressed(startGame); 
                // ボタンのスタイルを適用
                styleButton(startButton); 


                // === コンティニューボタンの作成と設定 ===
                continueButton = createButton('↺ CONTINUE'); // ボタンのテキストを設定
                // ボタンの位置をキャンバスの中央付近に設定
                continueButton.position(width / 2 - 60, height / 2 + 40); 
                // ボタンがクリックされたときにbackToStart関数を呼び出す
                continueButton.mousePressed(backToStart); 
                // ボタンのスタイルを適用
                styleButton(continueButton);
                // 初期状態ではコンティニューボタンを非表示にする
                continueButton.hide(); 
            }


            /**
             * ボタンのCSSスタイルを設定するヘルパー関数。
             * @param {object} btn - スタイルを適用するP5.jsのボタン要素
             */
            function styleButton(btn) {
                btn.style('font-size', '20px'); // フォントサイズ
                btn.style('padding', '10px'); // パディング
                btn.style('background-color', '#4CAF50'); // 背景色（緑）
                btn.style('color', 'white'); // 文字色
                btn.style('border', 'none'); // ボーダーなし
                btn.style('border-radius', '8px'); // 角の丸み
                btn.style('cursor', 'pointer'); // カーソルをポインターにする
            }


            /**
             * ゲームを開始する関数。
             * スタートボタンがクリックされたときに呼び出される。
             */
            function startGame() {
                started = true; // ゲーム開始フラグをtrueに設定
                snake = new Snake(); // 新しいスネークオブジェクトを作成
                food = createFood(); // 新しいフードの位置を作成
                loop(); // draw()関数の実行を再開（noLoop()で停止していた場合）
                startButton.hide(); // スタートボタンを非表示にする
                continueButton.hide(); // コンティニューボタンを非表示にする
            }


            /**
             * ゲームを初期画面に戻す関数。
             * コンティニューボタンがクリックされたときに呼び出される。
             */
            function backToStart() {
                started = false; // ゲーム開始フラグをfalseに設定
                continueButton.hide(); // コンティニューボタンを非表示にする
                startButton.show(); // スタートボタンを表示する
                clear(); // キャンバスの内容をクリアする
                background(30); // 背景を暗い灰色で塗りつぶす
            }


            /**
             * P5.jsのメイン描画ループ関数。
             * frameRateで設定された間隔で繰り返し実行される。
             */
            function draw() {
                // ゲームが開始されていない場合、draw()の実行を停止し、処理を終了
                if (!started) {
                    noLoop(); 
                    return;
                }


                background(30); // 背景を暗い灰色で塗りつぶす


                snake.update(); // スネークの位置を更新
                snake.show();   // スネークを描画


                // === 食べ物の描画 ===
                fill(255, 0, 0); // 食べ物の色を赤に設定
                // 食べ物をグリッドサイズに合わせて四角形として描画
                rect(food.x * gridSize, food.y * gridSize, gridSize, gridSize); 


                // スネークが食べ物を食べたかチェック
                if (snake.eat(food)) {
                    food = createFood(); // 食べたら新しい食べ物を生成
                }


                // === GAME OVERの処理 ===
                // スネークが死んだ（壁に衝突または自身に衝突）かチェック
                if (snake.dead()) {
                    noLoop(); // draw()の実行を停止
                    fill(255); // ゲームオーバーのテキストの色を設定
                    textAlign(CENTER, CENTER); // テキストの位置を中央に設定
                    textSize(40); // テキストサイズを設定
                    text("GAME OVER", width / 2, height / 2); // ゲームオーバーのテキストを表示


                    // コンティニューボタンを表示
                    continueButton.show();
                }
            }


            /**
             * キーが押されたときに呼び出されるP5.jsのイベント関数。
             */
            function keyPressed() {
                // ゲームが開始されていない場合は、キー入力を無視
                if (!started) return;


                // 'W'または'w'キーが押され、かつヘビが下方向へ移動中でない場合
                if ((key === 'w' || key === 'W') && snake.ydir !== 1) { 
                    snake.setDir(0, -1); // 上方向へ移動
                } 
                // 'S'または's'キーが押され、かつヘビが上方向へ移動中でない場合
                else if ((key === 's' || key === 'S') && snake.ydir !== -1) { 
                    snake.setDir(0, 1); // 下方向へ移動
                } 
                // 'A'または'a'キーが押され、かつヘビが右方向へ移動中でない場合
                else if ((key === 'a' || key === 'A') && snake.xdir !== 1) { 
                    snake.setDir(-1, 0); // 左方向へ移動
                } 
                // 'D'または'd'キーが押され、かつヘビが左方向へ移動中でない場合
                else if ((key === 'd' || key === 'D') && snake.xdir !== -1) { 
                    snake.setDir(1, 0); // 右方向へ移動
                }
            }


            /**
             * 食べ物の位置をランダムに生成する関数。
             * @returns {p5.Vector} 食べ物のグリッド座標
             */
            function createFood() { 
                // グリッドの列数内でランダムなX座標を生成
                let x = floor(random(cols));
                // グリッドの行数内でランダムなY座標を生成
                let y = floor(random(rows));
                return createVector(x, y); // ベクターとして座標を返す
            }


            /**
             * Snakeクラスの定義。
             * ヘビの動作と状態を管理する。
             */
            class Snake {
                /**
                 * Snakeクラスのコンストラクタ。
                 * ヘビの初期状態を設定する。
                 */
                constructor() {
                    this.body = []; // ヘビの体を構成するセグメントの配列
                    // ヘビの初期位置をキャンバスの中央に設定
                    this.body[0] = createVector(floor(cols / 2), floor(rows / 2)); 
                    this.xdir = 1; // 初期X方向（右）
                    this.ydir = 0; // 初期Y方向（なし）
                    this.growNext = false; // 次の更新で成長するかどうかのフラグ
                }


                /**
                 * ヘビを画面に描画する。
                 */
                show() {
                    // ヘビの各セグメントをループして描画
                    for (let part of this.body) {
                        fill(0, 0, 255); // ヘビの色を青に設定
                        // 各セグメントをグリッドサイズに合わせて四角形として描画
                        rect(part.x * gridSize, part.y * gridSize, gridSize, gridSize);
                    }
                }


                /**
                 * ヘビの移動方向を設定する。
                 * @param {number} x - X方向の新しい値 (-1, 0, 1)
                 * @param {number} y - Y方向の新しい値 (-1, 0, 1)
                 */
                setDir(x, y) {
                    this.xdir = x;
                    this.ydir = y;
                }


                /**
                 * ヘビの位置を更新する。
                 * フレームごとに呼び出され、ヘビを動かす。
                 */
                update() {
                    // ヘビの頭の位置をコピー（参照ではなく新しいオブジェクトとして）
                    let head = this.body[this.body.length - 1].copy(); 
                    head.x += this.xdir; // X方向に移動
                    head.y += this.ydir; // Y方向に移動
                    this.body.push(head); // 新しい頭を体の配列の最後に追加


                    // growNextがtrueでない場合（餌を食べていない場合）
                    if (!this.growNext) {
                        this.body.shift(); // 体の最初の部分（しっぽ）を削除し、長さを保つ
                    } else {
                        this.growNext = false; // 成長フラグをリセット
                    }
                }


                /**
                 * ヘビを次の更新で成長させるためのフラグを設定する。
                 */
                grow() {
                    this.growNext = true;
                }


                /**
                 * ヘビが指定された位置（食べ物）を食べたかどうかをチェックする。
                 * @param {p5.Vector} pos - 食べ物の位置
                 * @returns {boolean} 食べた場合はtrue、そうでない場合はfalse
                 */
                eat(pos) {
                    let head = this.body[this.body.length - 1]; // ヘビの頭を取得
                    // 頭の座標と食べ物の座標が一致するかチェック
                    if (head.x === pos.x && head.y === pos.y) {
                        this.grow(); // 一致すれば成長フラグをセット
                        return true; // 食べたことを示す
                    }
                    return false; // 食べていないことを示す
                }


                /**
                 * ヘビがゲームオーバーの条件を満たしているかどうかをチェックする。
                 * @returns {boolean} 死んだ場合はtrue、そうでない場合はfalse
                 */
                dead() {
                    let head = this.body[this.body.length - 1]; // ヘビの頭を取得


                    // === 壁との衝突判定 ===
                    // 頭がキャンバスの境界外に出た場合
                    if (head.x < 0 || head.y < 0 || head.x >= cols || head.y >= rows) {
                        return true; 
                    }


                    // === 自分自身との衝突判定 ===
                    // 頭以外の体の部分をループしてチェック
                    for (let i = 0; i < this.body.length - 1; i++) {
                        let part = this.body[i]; // 体の各部分
                        // 頭が体のどこかの部分と一致した場合
                        if (part.x === head.x && part.y === head.y) {
                            return true; 
                        }
                    }
                    return false; // 死んでいないことを示す
                }
            }



